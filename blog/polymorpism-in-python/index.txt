1:"$Sreact.fragment"
2:I[4927,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"ThemeProvider"]
3:I[6252,["252","static/chunks/252-822a320d24ca2e02.js","274","static/chunks/274-769122914a4517f4.js","930","static/chunks/930-0b53e8fd2502cd51.js","953","static/chunks/app/blog/%5Bslug%5D/page-d16a4e7949a9ec68.js"],""]
4:I[4927,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"ThemeSwitch"]
5:I[2329,[],""]
6:I[3517,["39","static/chunks/app/error-8198244559251fde.js"],"default"]
7:I[3725,[],""]
8:I[9744,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"default"]
9:I[8669,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"Analytics"]
a:I[9163,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"SpeedInsights"]
c:I[2207,[],"MetadataBoundary"]
e:I[2207,[],"OutletBoundary"]
11:I[2533,[],"AsyncMetadataOutlet"]
13:I[2207,[],"ViewportBoundary"]
15:I[5992,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/9eb31b5a3f6e6a4c.css","style"]
:HL["/_next/static/css/2b3a655339adccf8.css","style"]
:HL["/_next/static/css/ef46db3751d8e999.css","style"]
0:{"P":null,"b":"iQ3hwQ21uC99oVxDtvO7g","p":"","c":["","blog","polymorpism-in-python",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","polymorpism-in-python","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9eb31b5a3f6e6a4c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"__className_e8ce0c","children":[["$","head",null,{"children":[["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/rss.xml","title":"RSS Feed"}],["$","link",null,{"rel":"alternate","type":"application/atom+xml","href":"/atom.xml","title":"Atom Feed"}],["$","link",null,{"rel":"alternate","type":"application/feed+json","href":"/feed.json","title":"JSON Feed"}]]}],["$","body",null,{"className":"antialiased flex flex-col items-center justify-center mx-auto mt-2 lg:mt-8 mb-12","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","main",null,{"className":"flex-auto min-w-0 mt-2 md:mt-6 flex flex-col px-6 sm:px-4 md:px-0 max-w-[624px] w-full","children":[["$","nav",null,{"className":"lg:mb-16 mb-12 py-5","children":["$","div",null,{"className":"flex flex-col md:flex-row md:items-center justify-between","children":[["$","div",null,{"className":"flex items-center","children":["$","$L3",null,{"href":"/","className":"text-3xl font-semibold","children":"Akash Patki"}]}],["$","div",null,{"className":"flex flex-row gap-4 mt-6 md:mt-0 md:ml-auto items-center","children":[[["$","$L3","/blog",{"href":"/blog","className":"transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex align-middle relative","children":"Blog"}],["$","$L3","/projects",{"href":"/projects","className":"transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex align-middle relative","children":"Projects"}],["$","$L3","/",{"href":"/","className":"transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex align-middle relative","children":"Home"}]],["$","$L4",null,{}]]}]]}]}],["$","$L5",null,{"parallelRouterKey":"children","error":"$6","errorStyles":[],"errorScripts":[],"template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","section",null,{"children":[["$","h1",null,{"className":"font-medium text-2xl mb-8","children":"404 - Page not found"}],["$","p",null,{"className":"mb-4","children":"Oops! The page you're looking for doesn't seem to exist."}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L8",null,{}],["$","$L9",null,{}],["$","$La",null,{}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","polymorpism-in-python","d"],["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$Lb",["$","$Lc",null,{"children":"$Ld"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2b3a655339adccf8.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ef46db3751d8e999.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$Le",null,{"children":["$Lf","$L10",["$","$L11",null,{"promise":"$@12"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","FxOEzdUFLQzA5Tk6T80uL",{"children":[["$","$L13",null,{"children":"$L14"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$15","$undefined"],"s":false,"S":true}
16:"$Sreact.suspense"
17:I[2533,[],"AsyncMetadata"]
d:["$","$16",null,{"fallback":null,"children":["$","$L17",null,{"promise":"$@18"}]}]
b:["$","section",null,{"children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"No More `if isinstance`— Master Polymorphism in Python with `@singledispatch`!\",\"datePublished\":\"2025-07-15\",\"dateModified\":\"2025-07-15\",\"description\":\"Polymorphism sounds complex, but it’s easier (and cooler) than you think. Let a cartoon snake walk you through writing cleaner Python code.\",\"image\":\"/og?title=No%20More%20%60if%20isinstance%60%E2%80%94%20Master%20Polymorphism%20in%20Python%20with%20%60%40singledispatch%60!\",\"url\":\"https://keycache.github.io//blog/polymorpism-in-python\",\"author\":{\"@type\":\"Person\",\"name\":\"KeyCache\"}}"}}],["$","h1",null,{"className":"title mb-3 font-medium text-2xl","children":"No More `if isinstance`— Master Polymorphism in Python with `@singledispatch`!"}],["$","div",null,{"className":"flex justify-between items-center mt-2 mb-8 text-medium","children":["$","p",null,{"className":"text-sm text-neutral-600 dark:text-neutral-400","children":"Jul 15, 2025"}]}],["$","article",null,{"className":"prose prose-quoteless prose-neutral dark:prose-invert","children":"$L19"}]]}]
10:null
1a:I[4893,["252","static/chunks/252-822a320d24ca2e02.js","274","static/chunks/274-769122914a4517f4.js","930","static/chunks/930-0b53e8fd2502cd51.js","953","static/chunks/app/blog/%5Bslug%5D/page-d16a4e7949a9ec68.js"],"Image"]
1b:T425f,<span class="sh__line"><span class="sh__token--keyword" style="color:var(--sh-keyword)">from</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">functools</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">import</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">singledispatch</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color:var(--sh-keyword)">from</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">datetime</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">import</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">datetime</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color:var(--sh-keyword)">from</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">decimal</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">import</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">Decimal</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color:var(--sh-keyword)">import</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">json</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">@</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">singledispatch</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">def</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">value</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">raise</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">TypeError</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">f</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">Type {type(value)} not serializable</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">@</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">register</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">datetime</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">def</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">_</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">value</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">return</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">value</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">isoformat</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">@</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">register</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--class" style="color:var(--sh-class)">Decimal</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">def</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">_</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">value</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">return</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">float</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">value</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">@</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">register</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">list</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">def</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">_</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">value</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">return</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">[</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">item</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">for</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">item</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">in</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">value</span><span class="sh__token--sign" style="color:var(--sh-sign)">]</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">#</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">Usage</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">data</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">{</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">timestamp</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">datetime</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">utcnow</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">price</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--class" style="color:var(--sh-class)">Decimal</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">19.99</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">tags</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">to_json_serializable</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--sign" style="color:var(--sh-sign)">[</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">promo</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">sale</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">]</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">}</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">print</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">json</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">dumps</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">data</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">indent</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">2</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>19:[["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Because type-checking spaghetti code is so 2022"}],"\n"]}],"\n",["$","$L1a",null,{"alt":"Happy Python Developer","className":"rounded-lg","src":"/photos/polymorpism-in-python-2.png","width":640,"height":500}],"\n",["$","p",null,{"children":"Introduction"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Tired of writing long ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color:var(--sh-keyword)\">if</span><span class=\"sh__token--space\" style=\"color:var(--sh-space)\"> </span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">isinstance</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">(</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">.</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">.</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">.</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">)</span></span>"}}]," chains just to handle different data types?"]}],"\n",["$","li",null,{"children":["Say hello to ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatch</span></span>"}}],", Python’s elegant solution for type-based function overloading."]}],"\n",["$","li",null,{"children":"It’s Python’s take on polymorphism — and yes, it’s as cool as it sounds."}],"\n",["$","li",null,{"children":"In this blog, you’ll learn what it is, when to use it, and how it can make your code cleaner."}],"\n",["$","li",null,{"children":"We'll even walk through a real-world example: building a type-based serializer!"}],"\n"]}],"\n",["$","p",null,{"children":"Prerequisites"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Basic knowledge of Python functions and decorators."}],"\n",["$","li",null,{"children":["Understanding of data types like ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">int</span></span>"}}],", ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">str</span></span>"}}],", ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">list</span></span>"}}],", ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">datetime</span></span>"}}],", etc."]}],"\n",["$","li",null,{"children":["Familiarity with ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">isinstance</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">(</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">)</span></span>"}}]," and why it often clutters code."]}],"\n",["$","li",null,{"children":["Python 3.4+ (since ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatch</span></span>"}}]," was added in Python 3.4)."]}],"\n",["$","li",null,{"children":"A desire to write more modular and extensible code."}],"\n"]}],"\n",["$","p",null,{"children":["Understanding ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatch</span></span>"}}]]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatch</span></span>"}}]," is a decorator from ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">functools</span></span>"}}]," that lets you define a function whose behavior varies based on the type of the first argument."]}],"\n",["$","li",null,{"children":"It's Python’s way of enabling ad hoc polymorphism — overloading based on type."}],"\n",["$","li",null,{"children":"Each type gets its own version of the function, registered separately."}],"\n",["$","li",null,{"children":["Keeps logic isolated and clean — no need for nested ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color:var(--sh-keyword)\">if</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">/</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">elif</span></span>"}}]," blocks."]}],"\n",["$","li",null,{"children":"Makes your codebase easier to extend and test."}],"\n"]}],"\n",["$","p",null,{"children":"Example: Type-Based Data Serializer"}],"\n",["$","p",null,{"children":["Scenario:\nYou’re building an API or logging system that needs to serialize various Python objects (e.g., ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">datetime</span></span>"}}],", ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--class\" style=\"color:var(--sh-class)\">Decimal</span></span>"}}],", ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">list</span></span>"}}],") into JSON-compatible formats."]}],"\n",["$","p",null,{"children":["The Problem:\nUsing ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">isinstance</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">(</span><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">)</span></span>"}}]," checks everywhere creates tangled, unreadable code."]}],"\n",["$","p",null,{"children":["The Solution:\nUse ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatch</span></span>"}}]," to define clear, type-specific serializers."]}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1b"},"className":"language-python"}]}],"\n",["$","h3",null,{"id":"faqs","children":[[["$","a","link-faqs",{"href":"#faqs","className":"anchor"}]],"FAQs"]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Q: Does this replace object-oriented polymorphism?"}],"\nA: No, it complements it. This is for functions, not classes."]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Q: Can I use it with custom classes?"}],"\nA: Absolutely. Just register your class type with the dispatcher."]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Q: What happens if a type isn’t registered?"}],"\nA: The base function is called — you can handle it with a fallback or raise a ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--class\" style=\"color:var(--sh-class)\">TypeError</span></span>"}}],"."]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Q: Can I dispatch on more than one argument?"}],"\nA: No — ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatch</span></span>"}}]," only works on the first argument."]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Q: Is there a class-based version?"}],"\nA: Yes, Python 3.8+ includes ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatchmethod</span></span>"}}]," for methods inside classes."]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"id":"final-word","children":[[["$","a","link-final-word",{"href":"#final-word","className":"anchor"}]],"Final Word"]}],"\n",["$","p",null,{"children":[["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--sign\" style=\"color:var(--sh-sign)\">@</span><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">singledispatch</span></span>"}}]," is a powerful, Pythonic way to implement polymorphism and clean up messy code."]}],"\n",["$","p",null,{"children":"It encourages modular design, extensibility, and readable logic separation by type."}],"\n",["$","p",null,{"children":"Whether you're serializing data, formatting logs, or building type-specific behavior, this tool will save you time and refactors."}],"\n",["$","p",null,{"children":"It’s one of those \"once you know it, you use it everywhere\" Python features."}],"\n",["$","hr",null,{}],"\n",["$","$L1a",null,{"alt":"Illustration of a Python snake holding a toolbox labeled 'Polymorphism', admiring a clean OOP codebase on a monitor","className":"rounded-lg","src":"/photos/polymorpism-in-python-1.png","width":640,"height":500}]]
14:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:null
18:{"metadata":[["$","title","0",{"children":"No More `if isinstance`— Master Polymorphism in Python with `@singledispatch`! | Akash Patki"}],["$","meta","1",{"name":"description","content":"Polymorphism sounds complex, but it’s easier (and cooler) than you think. Let a cartoon snake walk you through writing cleaner Python code."}],["$","meta","2",{"name":"robots","content":"index, follow"}],["$","meta","3",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","4",{"property":"og:title","content":"No More `if isinstance`— Master Polymorphism in Python with `@singledispatch`!"}],["$","meta","5",{"property":"og:description","content":"Polymorphism sounds complex, but it’s easier (and cooler) than you think. Let a cartoon snake walk you through writing cleaner Python code."}],["$","meta","6",{"property":"og:url","content":"https://keycache.github.io//blog/polymorpism-in-python/"}],["$","meta","7",{"property":"og:image","content":"https://keycache.github.io//og?title=No%20More%20%60if%20isinstance%60%E2%80%94%20Master%20Polymorphism%20in%20Python%20with%20%60%40singledispatch%60!"}],["$","meta","8",{"property":"og:type","content":"article"}],["$","meta","9",{"property":"article:published_time","content":"2025-07-15"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"No More `if isinstance`— Master Polymorphism in Python with `@singledispatch`!"}],["$","meta","12",{"name":"twitter:description","content":"Polymorphism sounds complex, but it’s easier (and cooler) than you think. Let a cartoon snake walk you through writing cleaner Python code."}],["$","meta","13",{"name":"twitter:image","content":"https://keycache.github.io//og?title=No%20More%20%60if%20isinstance%60%E2%80%94%20Master%20Polymorphism%20in%20Python%20with%20%60%40singledispatch%60!"}],["$","link","14",{"rel":"icon","href":"/favicon.ico"}]],"error":null,"digest":"$undefined"}
12:{"metadata":"$18:metadata","error":null,"digest":"$undefined"}
