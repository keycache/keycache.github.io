1:"$Sreact.fragment"
2:I[4927,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"ThemeProvider"]
3:I[6252,["252","static/chunks/252-822a320d24ca2e02.js","274","static/chunks/274-769122914a4517f4.js","930","static/chunks/930-0b53e8fd2502cd51.js","419","static/chunks/app/projects/%5Bslug%5D/page-5405559b5a73f5f4.js"],""]
4:I[4927,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"ThemeSwitch"]
5:I[2329,[],""]
6:I[3517,["39","static/chunks/app/error-8198244559251fde.js"],"default"]
7:I[3725,[],""]
8:I[9744,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"default"]
9:I[8669,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"Analytics"]
a:I[9163,["73","static/chunks/5398b9db-8419f9f8598b8d28.js","252","static/chunks/252-822a320d24ca2e02.js","177","static/chunks/app/layout-6b390b4951074596.js"],"SpeedInsights"]
c:I[2207,[],"MetadataBoundary"]
e:I[2207,[],"OutletBoundary"]
11:I[2533,[],"AsyncMetadataOutlet"]
13:I[2207,[],"ViewportBoundary"]
15:I[5992,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/59273e8f773fc2b7.css","style"]
:HL["/_next/static/css/2b3a655339adccf8.css","style"]
:HL["/_next/static/css/ef46db3751d8e999.css","style"]
0:{"P":null,"b":"2qEtAzYbzMkvn6YNsXH9a","p":"","c":["","projects","wave-catch",""],"i":false,"f":[[["",{"children":["projects",{"children":[["slug","wave-catch","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/59273e8f773fc2b7.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"__className_e8ce0c","children":[["$","head",null,{"children":[["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/rss.xml","title":"RSS Feed"}],["$","link",null,{"rel":"alternate","type":"application/atom+xml","href":"/atom.xml","title":"Atom Feed"}],["$","link",null,{"rel":"alternate","type":"application/feed+json","href":"/feed.json","title":"JSON Feed"}]]}],["$","body",null,{"className":"antialiased flex flex-col items-center justify-center mx-auto mt-2 lg:mt-8 mb-12","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","main",null,{"className":"flex-auto min-w-0 mt-2 md:mt-6 flex flex-col px-6 sm:px-4 md:px-0 max-w-[624px] w-full","children":[["$","nav",null,{"className":"lg:mb-16 mb-12 py-5","children":["$","div",null,{"className":"flex flex-col md:flex-row md:items-center justify-between","children":[["$","div",null,{"className":"flex items-center","children":["$","$L3",null,{"href":"/","className":"text-3xl font-semibold","children":"Akash Patki"}]}],["$","div",null,{"className":"flex flex-row gap-4 mt-6 md:mt-0 md:ml-auto items-center","children":[[["$","$L3","/blog",{"href":"/blog","className":"transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex align-middle relative","children":"Blog"}],["$","$L3","/projects",{"href":"/projects","className":"transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex align-middle relative","children":"Projects"}],["$","$L3","/",{"href":"/","className":"transition-all hover:text-neutral-800 dark:hover:text-neutral-200 flex align-middle relative","children":"Home"}]],["$","$L4",null,{}]]}]]}]}],["$","$L5",null,{"parallelRouterKey":"children","error":"$6","errorStyles":[],"errorScripts":[],"template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","section",null,{"children":[["$","h1",null,{"className":"font-medium text-2xl mb-8","children":"404 - Page not found"}],["$","p",null,{"className":"mb-4","children":"Oops! The page you're looking for doesn't seem to exist."}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L8",null,{}],["$","$L9",null,{}],["$","$La",null,{}]]}]}]}]]}]]}],{"children":["projects",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","wave-catch","d"],["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$Lb",["$","$Lc",null,{"children":"$Ld"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2b3a655339adccf8.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ef46db3751d8e999.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$Le",null,{"children":["$Lf","$L10",["$","$L11",null,{"promise":"$@12"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","34gVmLsMVeQjv7wwklHfo",{"children":[["$","$L13",null,{"children":"$L14"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$15","$undefined"],"s":false,"S":true}
16:"$Sreact.suspense"
17:I[2533,[],"AsyncMetadata"]
d:["$","$16",null,{"fallback":null,"children":["$","$L17",null,{"promise":"$@18"}]}]
b:["$","section",null,{"children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Wave-Catch: Real-time Audio Processing with AI-Powered Transcription and Analysis\",\"datePublished\":\"2025-07-04\",\"dateModified\":\"2025-07-04\",\"description\":\"An AI-powered audio analysis tool that records, transcribes, and analyzes conversations to provide unbiased feedback and identify gaps that speakers might overlook\",\"image\":\"/og?title=Wave-Catch%3A%20Real-time%20Audio%20Processing%20with%20AI-Powered%20Transcription%20and%20Analysis\",\"url\":\"https://keycache.github.io//blog/wave-catch\",\"author\":{\"@type\":\"Person\",\"name\":\"KeyCache\"}}"}}],["$","h1",null,{"className":"title mb-3 font-medium text-2xl","children":"Wave-Catch: Real-time Audio Processing with AI-Powered Transcription and Analysis"}],["$","div",null,{"className":"flex justify-between items-center mt-2 mb-8 text-medium","children":["$","p",null,{"className":"text-sm text-neutral-600 dark:text-neutral-400","children":"Jul 4, 2025"}]}],["$","article",null,{"className":"prose prose-quoteless prose-neutral dark:prose-invert","children":"$L19"}]]}]
10:null
1a:T13a6,<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">#</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">Thread</span><span class="sh__token--sign" style="color:var(--sh-sign)">-</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">safe</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">audio</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">capture</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">with</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">configurable</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">parameters</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">audio_queue</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">queue</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--class" style="color:var(--sh-class)">Queue</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color:var(--sh-keyword)">with</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">sd</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--class" style="color:var(--sh-class)">InputStream</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">samplerate</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">SAMPLE_RATE</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">channels</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">CHANNELS</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">callback</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">audio_callback</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">blocksize</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">BLOCK_SIZE</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">dtype</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">DTYPE</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>1b:Tecc,<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">cmd</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">[</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">python_path</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">-m</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">mlx_audio.stt.generate</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">--model</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">model</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">--audio</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">file_path</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">--output</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">output_file</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">]</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>1c:T2a98,<span class="sh__line"><span class="sh__token--keyword" style="color:var(--sh-keyword)">with</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">requests</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">post</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">url</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">headers</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--sign" style="color:var(--sh-sign)">{</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--string" style="color:var(--sh-string)">Content-Type</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--string" style="color:var(--sh-string)">application/json</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color:var(--sh-sign)">}</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">                  </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">data</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">payload</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">stream</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">True</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">as</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">response</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">for</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">chunk</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">in</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">response</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">iter_content</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">chunk_size</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">None</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">decode_unicode</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">False</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">        </span><span class="sh__token--sign" style="color:var(--sh-sign)">#</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">Process</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">streaming</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">JSON</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">chunks</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">        </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">json_chunk</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">json</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">loads</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">json_str</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">        </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">content</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">json_chunk</span><span class="sh__token--sign" style="color:var(--sh-sign)">[</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--string" style="color:var(--sh-string)">choices</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color:var(--sh-sign)">]</span><span class="sh__token--sign" style="color:var(--sh-sign)">[</span><span class="sh__token--class" style="color:var(--sh-class)">0</span><span class="sh__token--sign" style="color:var(--sh-sign)">]</span><span class="sh__token--sign" style="color:var(--sh-sign)">[</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--string" style="color:var(--sh-string)">delta</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color:var(--sh-sign)">]</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">get</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--string" style="color:var(--sh-string)">content</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">        </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">if</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">content</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">            </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">out</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">+</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">content</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">            </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">print</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">content</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">end</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--string" style="color:var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">flush</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--class" style="color:var(--sh-class)">True</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>1d:Tf09,<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">def</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">get_prompts_for_task</span><span class="sh__token--sign" style="color:var(--sh-sign)">(</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">task</span><span class="sh__token--sign" style="color:var(--sh-sign)">)</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">if</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">task</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">speech</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">        </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">return</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">SP_ANALYSE_SPEECH</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">UP_ANALYSE_SPEECH</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">    </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">elif</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">task</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--sign" style="color:var(--sh-sign)">=</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--string" style="color:var(--sh-string)">incident</span><span class="sh__token--string" style="color:var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color:var(--sh-sign)">:</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color:var(--sh-space)">        </span><span class="sh__token--keyword" style="color:var(--sh-keyword)">return</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">SP_INCIDENT_LEARNING_DISCUSSION</span><span class="sh__token--sign" style="color:var(--sh-sign)">,</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">UP_INCIDENT_LEARNING_DISCUSSION</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>1e:Tf42,<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">#</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">Live</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">recording</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">and</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">analysis</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">python</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">main</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">py</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">-</span><span class="sh__token--sign" style="color:var(--sh-sign)">-</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">task</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">speech</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color:var(--sh-sign)">#</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--class" style="color:var(--sh-class)">Analyze</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">existing</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">transcript</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color:var(--sh-identifier)">python</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">main</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">py</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">-</span><span class="sh__token--sign" style="color:var(--sh-sign)">-</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">task</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">incident</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--sign" style="color:var(--sh-sign)">-</span><span class="sh__token--sign" style="color:var(--sh-sign)">-</span><span class="sh__token--identifier" style="color:var(--sh-identifier)">file</span><span class="sh__token--space" style="color:var(--sh-space)"> </span><span class="sh__token--identifier" style="color:var(--sh-identifier)">transcript</span><span class="sh__token--sign" style="color:var(--sh-sign)">.</span><span class="sh__token--property" style="color:var(--sh-property)">txt</span><span class="sh__token--break" style="color:var(--sh-break)"></span></span>19:[["$","h2",null,{"id":"introduction","children":[[["$","a","link-introduction",{"href":"#introduction","className":"anchor"}]],"Introduction"]}],"\n",["$","p",null,{"children":["Have you ever finished a presentation or important discussion and wondered, \"Did I miss something obvious?\" or \"What would an outsider think of this conversation?\" That's the exact challenge that inspired ",["$","strong",null,{"children":"Wave-Catch"}]," - a Python-based tool designed to capture, transcribe, and analyze audio content through the lens of AI-powered neutral analysis."]}],"\n",["$","p",null,{"children":"Wave-Catch was born from a simple but powerful realization: as humans, we're often too close to our own conversations and presentations to spot the gaps, inconsistencies, or opportunities that might be obvious to a neutral observer. By combining real-time audio recording, speech-to-text transcription, and large language model analysis, Wave-Catch acts as that \"outside observer\" - providing unbiased insights and identifying potential blind spots that we might overlook in the heat of the moment."}],"\n",["$","p",null,{"children":["The tool goes beyond simple transcription to offer something more valuable: ",["$","strong",null,{"children":"perspective"}],". Whether you're delivering a technical presentation, conducting an incident post-mortem, or leading a team discussion, Wave-Catch helps you see your own content through fresh eyes, uncovering insights that only emerge when viewed from an objective, analytical standpoint."]}],"\n",["$","h2",null,{"id":"problem-statement-motivation","children":[[["$","a","link-problem-statement-motivation",{"href":"#problem-statement-motivation","className":"anchor"}]],"Problem Statement / Motivation"]}],"\n",["$","p",null,{"children":["The core challenge I wanted to solve was deceptively simple: ",["$","strong",null,{"children":"how do you identify what you don't know you don't know?"}]," In presentations, meetings, and discussions, we often get so caught up in our own perspective that we miss obvious gaps, assumptions, or opportunities for improvement."]}],"\n",["$","p",null,{"children":"The specific problems I encountered were:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Blind spot identification"}],": When you're deeply involved in a topic, it's nearly impossible to spot your own knowledge gaps or unclear explanations"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Perspective bias"}],": Our own familiarity with the subject matter prevents us from seeing how our communication might land with others"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Real-time analysis limitations"}],": During live conversations, we're too focused on participation to simultaneously analyze the broader patterns and insights"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Missed learning opportunities"}],": Without neutral analysis, valuable insights from discussions often go unrecognized and unexplored"]}],"\n"]}],"\n",["$","p",null,{"children":"Traditional approaches like peer review or feedback sessions, while valuable, come with their own biases and limitations. What I needed was a way to get that \"outside-the-box\" thinking that only comes from a truly neutral perspective - one that could analyze my talks and transcripts without the baggage of personal relationships, organizational politics, or domain-specific assumptions."}],"\n",["$","p",null,{"children":["The goal wasn't just to transcribe what was said, but to ",["$","strong",null,{"children":"uncover what wasn't said"}]," - the implicit assumptions, the logical gaps, the unexplored angles that an intelligent but neutral observer might immediately spot. This is where large language models excel: they can process information without the contextual biases that humans inevitably bring to the table."]}],"\n",["$","h2",null,{"id":"solution-overview","children":[[["$","a","link-solution-overview",{"href":"#solution-overview","className":"anchor"}]],"Solution Overview"]}],"\n",["$","p",null,{"children":"Wave-Catch addresses these challenges through a modular, Python-based architecture that orchestrates three main components:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Real-time Audio Recording"}],": Uses ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color:var(--sh-identifier)\">sounddevice</span></span>"}}]," to capture high-quality audio with configurable parameters"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Speech-to-Text Transcription"}],": Leverages MLX Audio with the Parakeet model for accurate transcription"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"AI-Powered Analysis"}],": Integrates with LLM Gateway to provide context-aware analysis using different prompt templates"]}],"\n"]}],"\n",["$","p",null,{"children":"The tool supports multiple analysis modes:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Speech Analysis"}],": General communication and speech pattern analysis"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Incident Learning"}],": Structured post-mortem and learning discussions"]}],"\n"]}],"\n",["$","p",null,{"children":"Key features include:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Multi-threaded recording"}]," for smooth audio capture"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Graceful interrupt handling"}]," (Ctrl+C to stop)"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Flexible input sources"}]," (live recording or existing transcript files)"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Streaming LLM responses"}]," for real-time feedback"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Rich markdown rendering"}]," for beautiful output formatting"]}],"\n"]}],"\n",["$","h2",null,{"id":"implementation-details","children":[[["$","a","link-implementation-details",{"href":"#implementation-details","className":"anchor"}]],"Implementation Details"]}],"\n",["$","p",null,{"children":"The core architecture revolves around several key components:"}],"\n",["$","h3",null,{"id":"audio-recording-pipeline","children":[[["$","a","link-audio-recording-pipeline",{"href":"#audio-recording-pipeline","className":"anchor"}]],"Audio Recording Pipeline"]}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1a"},"className":"language-python"}]}],"\n",["$","p",null,{"children":"The recording system uses a producer-consumer pattern where audio chunks are captured in a callback function and stored in a thread-safe queue. This ensures smooth recording without blocking the main thread."}],"\n",["$","h3",null,{"id":"transcription-integration","children":[[["$","a","link-transcription-integration",{"href":"#transcription-integration","className":"anchor"}]],"Transcription Integration"]}],"\n",["$","p",null,{"children":"The transcription leverages MLX Audio with the Parakeet model:"}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1b"},"className":"language-python"}]}],"\n",["$","p",null,{"children":"This approach provides high-quality transcription while maintaining local processing capabilities."}],"\n",["$","h3",null,{"id":"llm-integration-with-streaming","children":[[["$","a","link-llm-integration-with-streaming",{"href":"#llm-integration-with-streaming","className":"anchor"}]],"LLM Integration with Streaming"]}],"\n",["$","p",null,{"children":"One of the most interesting aspects is the streaming LLM integration:"}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1c"},"className":"language-python"}]}],"\n",["$","p",null,{"children":"This streaming approach provides real-time feedback as the LLM generates responses, creating a more interactive experience."}],"\n",["$","h3",null,{"id":"modular-prompt-system","children":[[["$","a","link-modular-prompt-system",{"href":"#modular-prompt-system","className":"anchor"}]],"Modular Prompt System"]}],"\n",["$","p",null,{"children":"The tool uses a flexible prompt system that adapts to different analysis contexts:"}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1d"},"className":"language-python"}]}],"\n",["$","p",null,{"children":"This allows for easy extension to new analysis types without modifying core logic."}],"\n",["$","h2",null,{"id":"key-learnings-and-insights","children":[[["$","a","link-key-learnings-and-insights",{"href":"#key-learnings-and-insights","className":"anchor"}]],"Key Learnings & Insights"]}],"\n",["$","p",null,{"children":"Building Wave-Catch taught me several valuable lessons about audio processing and AI integration:"}],"\n",["$","h3",null,{"id":"threading-and-audio-processing","children":[[["$","a","link-threading-and-audio-processing",{"href":"#threading-and-audio-processing","className":"anchor"}]],"Threading and Audio Processing"]}],"\n",["$","p",null,{"children":"Audio processing requires careful attention to threading and buffer management. The callback-based approach with thread-safe queues proved essential for maintaining audio quality without dropouts."}],"\n",["$","h3",null,{"id":"llm-streaming-implementation","children":[[["$","a","link-llm-streaming-implementation",{"href":"#llm-streaming-implementation","className":"anchor"}]],"LLM Streaming Implementation"]}],"\n",["$","p",null,{"children":"Implementing streaming responses from LLMs significantly improved the user experience. Instead of waiting for complete responses, users see analysis results in real-time, making the tool feel more responsive and interactive."}],"\n",["$","h3",null,{"id":"error-handling-in-ai-pipelines","children":[[["$","a","link-error-handling-in-ai-pipelines",{"href":"#error-handling-in-ai-pipelines","className":"anchor"}]],"Error Handling in AI Pipelines"]}],"\n",["$","p",null,{"children":"AI pipelines are inherently fragile due to multiple external dependencies. Robust error handling at each stage (recording, transcription, analysis) ensures the tool remains usable even when individual components fail."}],"\n",["$","h3",null,{"id":"configuration-management","children":[[["$","a","link-configuration-management",{"href":"#configuration-management","className":"anchor"}]],"Configuration Management"]}],"\n",["$","p",null,{"children":"Separating configuration into constants and making paths configurable proved crucial for deployment across different environments."}],"\n",["$","h2",null,{"id":"user-experience-and-testing","children":[[["$","a","link-user-experience-and-testing",{"href":"#user-experience-and-testing","className":"anchor"}]],"User Experience & Testing"]}],"\n",["$","p",null,{"children":"Testing revealed several important UX considerations:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Clear progress indicators"}]," help users understand what's happening during longer operations"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Graceful interrupt handling"}]," allows users to stop recording naturally"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Rich markdown output"}]," makes analysis results easy to read and share"]}],"\n"]}],"\n",["$","p",null,{"children":"The command-line interface supports both live recording and file-based analysis:"}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$1e"},"className":"language-bash"}]}],"\n",["$","h2",null,{"id":"reflections-and-personal-takeaways","children":[[["$","a","link-reflections-and-personal-takeaways",{"href":"#reflections-and-personal-takeaways","className":"anchor"}]],"Reflections & Personal Takeaways"]}],"\n",["$","p",null,{"children":["This project reinforced the importance of ",["$","strong",null,{"children":"building composable systems"}],". By separating audio capture, transcription, and analysis into distinct components, the tool becomes much more maintainable and extensible."]}],"\n",["$","p",null,{"children":["The ",["$","strong",null,{"children":"streaming LLM integration"}]," was particularly rewarding to implement. It transforms what could be a frustrating wait into an engaging, real-time experience that feels more like a conversation with the AI."]}],"\n",["$","p",null,{"children":["Working with ",["$","strong",null,{"children":"multiple AI services"}]," (STT and LLM) highlighted the importance of robust error handling and graceful degradation. Each service has its own failure modes, and the system needs to handle them elegantly."]}],"\n",["$","p",null,{"children":["Finally, the ",["$","strong",null,{"children":"modular prompt system"}]," proved its worth immediately. Being able to switch between different analysis contexts (speech vs. incident) with simple command-line flags makes the tool much more versatile."]}],"\n",["$","h2",null,{"id":"whats-next-future-work","children":[[["$","a","link-whats-next-future-work",{"href":"#whats-next-future-work","className":"anchor"}]],"What's Next / Future Work"]}],"\n",["$","p",null,{"children":"Several exciting directions for Wave-Catch's evolution:"}],"\n",["$","h3",null,{"id":"enhanced-analysis-modes","children":[[["$","a","link-enhanced-analysis-modes",{"href":"#enhanced-analysis-modes","className":"anchor"}]],"Enhanced Analysis Modes"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Meeting summary mode"}],": Structured meeting notes with action items"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Interview analysis"}],": Candidate evaluation and feedback generation"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Training analysis"}],": Performance coaching and improvement suggestions"]}],"\n"]}],"\n",["$","h3",null,{"id":"technical-improvements","children":[[["$","a","link-technical-improvements",{"href":"#technical-improvements","className":"anchor"}]],"Technical Improvements"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Real-time transcription"}],": Stream audio directly to STT for live analysis"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Multi-speaker detection"}],": Identify and track different speakers"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Audio preprocessing"}],": Noise reduction and audio enhancement"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Web interface"}],": Browser-based UI for easier access"]}],"\n"]}],"\n",["$","h3",null,{"id":"integration-enhancements","children":[[["$","a","link-integration-enhancements",{"href":"#integration-enhancements","className":"anchor"}]],"Integration Enhancements"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Slack/Teams integration"}],": Direct posting of analysis results"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Calendar integration"}],": Automatic meeting analysis"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"File format support"}],": Support for various audio formats beyond WAV"]}],"\n"]}],"\n",["$","h3",null,{"id":"performance-optimization","children":[[["$","a","link-performance-optimization",{"href":"#performance-optimization","className":"anchor"}]],"Performance Optimization"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Local LLM support"}],": Reduce dependency on external services"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Caching system"}],": Store and reuse transcriptions"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Batch processing"}],": Analyze multiple files efficiently"]}],"\n"]}],"\n",["$","h2",null,{"id":"resources-and-links","children":[[["$","a","link-resources-and-links",{"href":"#resources-and-links","className":"anchor"}]],"Resources & Links"]}],"\n",["$","h3",null,{"id":"key-technologies-used","children":[[["$","a","link-key-technologies-used",{"href":"#key-technologies-used","className":"anchor"}]],"Key Technologies Used"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://python-sounddevice.readthedocs.io/","children":"sounddevice"}]}],": Real-time audio I/O"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/Blaizzy/mlx-audio","children":"MLX Audio"}]}],": High-performance speech-to-text"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://rich.readthedocs.io/","children":"Rich"}]}],": Beautiful terminal formatting"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://huggingface.co/mlx-community/parakeet-tdt-0.6b-v2","children":"Parakeet Model"}]}],": Speech recognition model"]}],"\n"]}],"\n",["$","h3",null,{"id":"development-resources","children":[[["$","a","link-development-resources",{"href":"#development-resources","className":"anchor"}]],"Development Resources"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Threading in Python"}],": Essential for audio processing"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"LLM Gateway Integration"}],": Streaming response handling"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Audio Processing Fundamentals"}],": Understanding sample rates and formats"]}],"\n"]}],"\n",["$","h2",null,{"id":"call-to-action-closing-thoughts","children":[[["$","a","link-call-to-action-closing-thoughts",{"href":"#call-to-action-closing-thoughts","className":"anchor"}]],"Call to Action / Closing Thoughts"]}],"\n",["$","p",null,{"children":"Wave-Catch represents the potential of combining multiple AI services into cohesive, user-friendly tools. While the current implementation focuses on audio analysis, the architectural patterns are broadly applicable to other AI integration challenges."}],"\n",["$","p",null,{"children":"If you're interested in building similar tools, I'd encourage you to:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Start with clear separation of concerns"}]," - keep audio, transcription, and analysis separate"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Implement streaming interfaces"}]," where possible for better UX"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Design for extensibility"}]," - new analysis types should be easy to add"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Focus on error handling"}]," - AI pipelines have many failure points"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","p",null,{"children":["$","em",null,{"children":["Want to try Wave-Catch or contribute to its development? Check out the ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/keycache/wave-catch","children":"project repository"}]," and let's build something amazing together!"]}]}]]
14:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:null
18:{"metadata":[["$","title","0",{"children":"Wave-Catch: Real-time Audio Processing with AI-Powered Transcription and Analysis | Akash Patki"}],["$","meta","1",{"name":"description","content":"An AI-powered audio analysis tool that records, transcribes, and analyzes conversations to provide unbiased feedback and identify gaps that speakers might overlook"}],["$","meta","2",{"name":"robots","content":"index, follow"}],["$","meta","3",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","4",{"property":"og:title","content":"Wave-Catch: Real-time Audio Processing with AI-Powered Transcription and Analysis"}],["$","meta","5",{"property":"og:description","content":"An AI-powered audio analysis tool that records, transcribes, and analyzes conversations to provide unbiased feedback and identify gaps that speakers might overlook"}],["$","meta","6",{"property":"og:url","content":"https://keycache.github.io//blog/wave-catch/"}],["$","meta","7",{"property":"og:image","content":"https://keycache.github.io//og?title=Wave-Catch%3A%20Real-time%20Audio%20Processing%20with%20AI-Powered%20Transcription%20and%20Analysis"}],["$","meta","8",{"property":"og:type","content":"article"}],["$","meta","9",{"property":"article:published_time","content":"2025-07-04"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Wave-Catch: Real-time Audio Processing with AI-Powered Transcription and Analysis"}],["$","meta","12",{"name":"twitter:description","content":"An AI-powered audio analysis tool that records, transcribes, and analyzes conversations to provide unbiased feedback and identify gaps that speakers might overlook"}],["$","meta","13",{"name":"twitter:image","content":"https://keycache.github.io//og?title=Wave-Catch%3A%20Real-time%20Audio%20Processing%20with%20AI-Powered%20Transcription%20and%20Analysis"}],["$","link","14",{"rel":"icon","href":"/favicon.ico"}]],"error":null,"digest":"$undefined"}
12:{"metadata":"$18:metadata","error":null,"digest":"$undefined"}
